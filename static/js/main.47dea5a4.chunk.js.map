{"version":3,"sources":["PokemonItem.js","ListPage.js","App.js","serviceWorker.js","index.js"],"names":["PokemonItem","className","this","props","character","pokemon","toUpperCase","alt","src","url_image","type_1","attack","defense","Component","ListPage","state","data","searchQuery","handleChange","e","value","target","setState","handleClick","a","request","get","fetchedData","body","results","onChange","onClick","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAEqBA,E,uKAEb,OACI,4BACI,wBAAIC,UAAU,gBACV,wBAAIA,UAAU,gBAAgBC,KAAKC,MAAMC,UAAUC,QAAQC,eAC3D,yBAAKL,UAAU,oBAAoBM,IAAKL,KAAKC,MAAMC,UAAUC,QAASG,IAAKN,KAAKC,MAAMC,UAAUK,YAChG,uBAAGR,UAAU,gBAAb,UAAoCC,KAAKC,MAAMC,UAAUM,QACzD,uBAAGT,UAAU,kBAAb,YAAwCC,KAAKC,MAAMC,UAAUO,QAC7D,uBAAGV,UAAU,mBAAb,YAAyCC,KAAKC,MAAMC,UAAUQ,e,GATzCC,a,iBCGpBC,E,4MAEjBC,MAAQ,CACJC,KAAM,GACNC,YAAa,I,EAGjBC,aAAc,SAACC,GACX,IAAMC,EAAQD,EAAEE,OAAOD,MACvB,EAAKE,SAAS,CAACL,YAAaG,K,EAGhCG,Y,sBAAc,4BAAAC,EAAA,sEACgBC,IAAQC,IAAR,oEAAyE,EAAKX,MAAME,cADpG,OACJU,EADI,OAEV,EAAKL,SAAS,CAAEN,KAAMW,EAAYC,KAAKC,UAF7B,2C,uDAMV,OACI,6BACI,2BAAO5B,UAAU,iBAAiB6B,SAAU5B,KAAKgB,eACjD,4BAAQa,QAAS7B,KAAKqB,aAAtB,mBACA,4BAEQrB,KAAKa,MAAMC,KAAKgB,KAAI,SAAC5B,GACjB,OAAO,yBAAKH,UAAU,gBAClB,kBAAC,EAAD,CAAaG,UAAWA,c,GA1BlBS,aCAjBoB,G,6KAEjB,OACE,yBAAKhC,UAAU,cACb,kBAAC,EAAD,W,GAJyBY,cCObqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.47dea5a4.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class PokemonItem extends Component {\n    render() {\n        return (\n            <ul>\n                <li className=\"pokemon-item\">\n                    <h2 className=\"pokemon-name\">{this.props.character.pokemon.toUpperCase()}</h2>\n                    <img className=\"pokemon-character\" alt={this.props.character.pokemon} src={this.props.character.url_image}/>\n                    <p className=\"pokemon-type\">Type = {this.props.character.type_1}</p>\n                    <p className=\"pokemon-attack\">Attack = {this.props.character.attack}</p>\n                    <p className=\"pokemon-defense\">Defense ={this.props.character.defense}</p>\n                </li>\n                \n            </ul>\n        )\n    }\n}\n","import React, { Component } from 'react';\n// import data from './data.js';\nimport PokemonItem from './PokemonItem.js';\nimport request from 'superagent';\n\nexport default class ListPage extends Component {\n\n    state = {\n        data: [],\n        searchQuery: ''\n    }\n\n    handleChange= (e) => {\n        const value = e.target.value;\n        this.setState({searchQuery: value});\n    }\n\n    handleClick = async () => {\n        const fetchedData = await request.get(`https://alchemy-pokedex.herokuapp.com/api/pokedex?pokemon=${this.state.searchQuery}`);\n        this.setState({ data: fetchedData.body.results });\n    }\n\n    render() {\n        return (\n            <div>\n                <input className=\"pokemon-search\" onChange={this.handleChange}/>\n                <button onClick={this.handleClick}>Search Pokemon!</button>\n                <ul>\n                    {\n                        this.state.data.map((character) => {\n                            return <div className=\"pokemon-card\">\n                                <PokemonItem character={character}/>\n                                </div>\n                        })\n                    } \n               </ul>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport ListPage from './ListPage.js';\nimport './App.css';\n\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"PokemonApp\">\n        <ListPage />\n        \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}